{
  "address": "0xf69E1dFAc3D43F438Bae80090b8E186B0231CFeb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasRegisteredPoh",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "managers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "markAsRegistered",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3c41d4b20bc5ebe4987036ad105a24c88f8f031e090f6f133854ff2a41b94eb",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0xf69E1dFAc3D43F438Bae80090b8E186B0231CFeb",
    "transactionIndex": 0,
    "gasUsed": "299676",
    "logsBloom": "0x
    "blockHash": "0x104f056c79af9eac4118400a0a8336a5d89b44b46f19d5dfa1e98fc566c2ed2a",
    "transactionHash": "0xc3c41d4b20bc5ebe4987036ad105a24c88f8f031e090f6f133854ff2a41b94eb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 145,
        "transactionHash": "0xc3c41d4b20bc5ebe4987036ad105a24c88f8f031e090f6f133854ff2a41b94eb",
        "address": "0xf69E1dFAc3D43F438Bae80090b8E186B0231CFeb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x104f056c79af9eac4118400a0a8336a5d89b44b46f19d5dfa1e98fc566c2ed2a"
      }
    ],
    "blockNumber": 145,
    "cumulativeGasUsed": "299676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f26a89438b651961fae7e798534b117",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasRegisteredPoh\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"markAsRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract to manage the registration status of addresses using Proof of Humanity (PoH).\",\"kind\":\"dev\",\"methods\":{\"isRegistered(address)\":{\"details\":\"Checks if an address has successfully registered using PoH.\",\"params\":{\"_address\":\"The address to check.\"},\"returns\":{\"_0\":\"bool True if the address has registered, false otherwise.\"}},\"markAsRegistered(address)\":{\"details\":\"Marks an address as having successfully registered using PoH.\",\"params\":{\"_address\":\"The address to mark as registered.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setManager(address,bool)\":{\"details\":\"Sets or revokes the manager role for an address. Allows the contract owner to designate certain addresses as managers, who are then authorized to mark addresses as having successfully registered using PoH. This function can also be used to revoke the manager role by setting `isManager` to false.\",\"params\":{\"_manager\":\"The address to be set as a manager or to have its manager role revoked.\",\"isManager\":\"A boolean indicating whether the address should be set as a manager (true) or have its manager role revoked (false).\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PohRegistrationManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/PohRegistrationManager.sol\":\"PohRegistrationManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ethregistrar/PohRegistrationManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title PohRegistrationManager\\n * @dev Contract to manage the registration status of addresses using Proof of Humanity (PoH).\\n */\\ncontract PohRegistrationManager is Ownable {\\n    mapping(address => bool) public hasRegisteredPoh;\\n    mapping(address => bool) public managers;\\n\\n    modifier onlyManager() {\\n        require(managers[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Marks an address as having successfully registered using PoH.\\n     * @param _address The address to mark as registered.\\n     */\\n    function markAsRegistered(address _address) external onlyManager {\\n        hasRegisteredPoh[_address] = true;\\n    }\\n\\n    /**\\n     * @dev Checks if an address has successfully registered using PoH.\\n     * @param _address The address to check.\\n     * @return bool True if the address has registered, false otherwise.\\n     */\\n    function isRegistered(address _address) public view returns (bool) {\\n        return hasRegisteredPoh[_address];\\n    }\\n\\n    /**\\n     * @dev Sets or revokes the manager role for an address.\\n     * Allows the contract owner to designate certain addresses as managers,\\n     * who are then authorized to mark addresses as having successfully registered using PoH.\\n     * This function can also be used to revoke the manager role by setting `isManager` to false.\\n     *\\n     * @param _manager The address to be set as a manager or to have its manager role revoked.\\n     * @param isManager A boolean indicating whether the address should be set as a manager (true)\\n     * or have its manager role revoked (false).\\n     */\\n    function setManager(address _manager, bool isManager) external onlyOwner {\\n        managers[_manager] = isManager;\\n    }\\n}\\n\",\"keccak256\":\"0x4e82cba761baf04d540f4f67b3cc454d1756b52622db5be176f8087daf69ffe9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104038061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a5e90eee1161005b578063a5e90eee146100fd578063c3c5a54714610110578063f2fde38b1461013c578063fdff9b4d1461014f57600080fd5b80633682447e1461008d578063715018a6146100a25780638da5cb5b146100aa5780639241f085146100ca575b600080fd5b6100a061009b36600461036f565b610172565b005b6100a06101b5565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100ed6100d836600461036f565b60016020526000908152604090205460ff1681565b60405190151581526020016100c1565b6100a061010b366004610391565b6101c9565b6100ed61011e36600461036f565b6001600160a01b031660009081526001602052604090205460ff1690565b6100a061014a36600461036f565b6101fc565b6100ed61015d36600461036f565b60026020526000908152604090205460ff1681565b3360009081526002602052604090205460ff1661018e57600080fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6101bd610291565b6101c760006102eb565b565b6101d1610291565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b610204610291565b6001600160a01b0381166102855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61028e816102eb565b50565b6000546001600160a01b031633146101c75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027c565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461036a57600080fd5b919050565b60006020828403121561038157600080fd5b61038a82610353565b9392505050565b600080604083850312156103a457600080fd5b6103ad83610353565b9150602083013580151581146103c257600080fd5b80915050925092905056fea26469706673582212202ee739fed17d12496713095cffb8470126914489f357e323c55fe76e586982d964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a5e90eee1161005b578063a5e90eee146100fd578063c3c5a54714610110578063f2fde38b1461013c578063fdff9b4d1461014f57600080fd5b80633682447e1461008d578063715018a6146100a25780638da5cb5b146100aa5780639241f085146100ca575b600080fd5b6100a061009b36600461036f565b610172565b005b6100a06101b5565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100ed6100d836600461036f565b60016020526000908152604090205460ff1681565b60405190151581526020016100c1565b6100a061010b366004610391565b6101c9565b6100ed61011e36600461036f565b6001600160a01b031660009081526001602052604090205460ff1690565b6100a061014a36600461036f565b6101fc565b6100ed61015d36600461036f565b60026020526000908152604090205460ff1681565b3360009081526002602052604090205460ff1661018e57600080fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6101bd610291565b6101c760006102eb565b565b6101d1610291565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b610204610291565b6001600160a01b0381166102855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61028e816102eb565b50565b6000546001600160a01b031633146101c75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027c565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461036a57600080fd5b919050565b60006020828403121561038157600080fd5b61038a82610353565b9392505050565b600080604083850312156103a457600080fd5b6103ad83610353565b9150602083013580151581146103c257600080fd5b80915050925092905056fea26469706673582212202ee739fed17d12496713095cffb8470126914489f357e323c55fe76e586982d964736f6c63430008110033",
  "devdoc": {
    "details": "Contract to manage the registration status of addresses using Proof of Humanity (PoH).",
    "kind": "dev",
    "methods": {
      "isRegistered(address)": {
        "details": "Checks if an address has successfully registered using PoH.",
        "params": {
          "_address": "The address to check."
        },
        "returns": {
          "_0": "bool True if the address has registered, false otherwise."
        }
      },
      "markAsRegistered(address)": {
        "details": "Marks an address as having successfully registered using PoH.",
        "params": {
          "_address": "The address to mark as registered."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setManager(address,bool)": {
        "details": "Sets or revokes the manager role for an address. Allows the contract owner to designate certain addresses as managers, who are then authorized to mark addresses as having successfully registered using PoH. This function can also be used to revoke the manager role by setting `isManager` to false.",
        "params": {
          "_manager": "The address to be set as a manager or to have its manager role revoked.",
          "isManager": "A boolean indicating whether the address should be set as a manager (true) or have its manager role revoked (false)."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PohRegistrationManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 444,
        "contract": "contracts/ethregistrar/PohRegistrationManager.sol:PohRegistrationManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15121,
        "contract": "contracts/ethregistrar/PohRegistrationManager.sol:PohRegistrationManager",
        "label": "hasRegisteredPoh",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15125,
        "contract": "contracts/ethregistrar/PohRegistrationManager.sol:PohRegistrationManager",
        "label": "managers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}