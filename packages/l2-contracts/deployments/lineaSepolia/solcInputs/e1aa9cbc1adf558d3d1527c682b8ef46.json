{
  "language": "Solidity",
  "sources": {
    "contracts/ethregistrar/FixedPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"./IPriceOracle.sol\";\n\ncontract FixedPriceOracle is IPriceOracle {\n    uint256 public constant FIXED_PRICE_USD = 1000000 * 10 ** 18; // 1,000,000 USD in Wei\n\n    function price(\n        string calldata,\n        uint256,\n        uint256\n    ) external pure override returns (Price memory) {\n        return Price(FIXED_PRICE_USD, 0);\n    }\n}\n"
    },
    "contracts/ethregistrar/IPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 <0.9.0;\n\ninterface IPriceOracle {\n    struct Price {\n        uint256 base;\n        uint256 premium;\n    }\n\n    /**\n     * @dev Returns the price to register or renew a name.\n     * @param name The name being registered or renewed.\n     * @param expires When the name presently expires (0 if this is a new registration).\n     * @param duration How long the name is being registered or extended for, in seconds.\n     * @return base premium tuple of base price + premium price\n     */\n    function price(\n        string calldata name,\n        uint256 expires,\n        uint256 duration\n    ) external view returns (Price calldata);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}